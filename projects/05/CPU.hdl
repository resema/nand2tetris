// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoder
    Not(in=instruction[15], out=aInst);
    Not(in=aInst, out=cInst);
        
    Not(in=ngOut, out=notNg);
    Not(in=zrOut, out=notZr);
    Mux(a=instruction[2], b=instruction[0], sel=notNg, out=ngOrNot);
    Mux(a=instruction[1], b=ngOrNot, sel=notZr, out=Load);
    Not(in=Load, out=notLoad);
    Or(a=notLoad, b=aInst, out=incr);
    And(a=Load, b=cInst, out=loadIt);
    
    And(a=instruction[5], b=cInst, out=loadAc);
    Or(a=loadAc, b=aInst, out=loadA);
    And(a=instruction[4], b=cInst, out=loadD);
    
    // M write
    And(a=cInst, b=instruction[3], out=writeM);

    // A Register
    Mux16(a=aluOut , b=instruction, sel=aInst , out=muxA);  // not sure about cInst
    ARegister(in=muxA, load=loadA, out=regA, out[0..14]=addressM);
    
    // D Register
    DRegister(in=aluOut , load=loadD, out=regD);
    
    // ALU
    Mux16(a=regA, b=inM, sel=instruction[12], out=muxALU); // c=a
    ALU(x=regD, y=muxALU, zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , zr=zrOut , ng=ngOut , out=outM, out=aluOut);
    
    // PC
    PC(in=regA, load=loadIt , inc=incr , reset=reset, out[0..14]=pc);  
}









