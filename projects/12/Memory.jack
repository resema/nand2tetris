// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
  
    static Array ram;
    static Array heap;
    static Array freeList;
    static Array NOWORD;
    static int LENGTH;
    static int NEXT;
    
    /** Initializes the class. */
    function void init() {
      let ram = 0;            // Ram Base Address
      let heap = 2048;        // Heap Base Address
      let NEXT = 0;
      let LENGTH = 1;
      
      let freeList = heap;        // head
      let freeList[NEXT] = 0;        // next
      let freeList[LENGTH] = 14335;     // size
      let NOWORD = 16383;
      
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array prevWord, foundWord;
      var int blockSz, wordSz;
      
      let blockSz = size+2;
      let prevWord = Memory.findPrevBestFit(blockSz);
      if (prevWord = NOWORD) {
        let foundWord = null;
      }
      else {
        if (prevWord = 0) {     // word is at the head of the freeList
          let foundWord = freeList;
          let wordSz = foundWord[LENGTH];
          if (wordSz > blockSz) {  /* word is bigger than block */
            let freeList = freeList + blockSz;        // new head
            let freeList[LENGTH] = wordSz - blockSz;   
          }
          else {  /* first element fits in size */
            let freeList = freeList[NEXT];
          }
        }
        else {
          let foundWord = prevWord[NEXT];
          let wordSz = foundWord[LENGTH];
          if (wordSz > blockSz) {   /* word is bigger than block */
            let prevWord[NEXT] = foundWord[NEXT];
            let prevWord[LENGTH] = wordSz - blockSz;
          }
          else {  /* first element fits in size */
            let prevWord[NEXT] = foundWord[NEXT];
          }          
        }
      }
      return foundWord+2;
    }

    /** Find word previous to best fit word */
    function Array findPrevBestFit(int size) {
      var Array prevBestWord, prevWord, curWord;
      var int bestSize, curSize;
      let prevBestWord = NOWORD;
      let bestSize = 16384-2048;
      let curWord = freeList;   
      let prevWord = 0;         
      
      while (~(curWord = 0)) {
        let curSize = curWord[LENGTH];
        if (~(curSize < size) & (curSize < bestSize)) {     // found new better word
          let prevBestWord = prevWord;
          let bestSize = curSize;
        }
        let prevWord = curWord;
        let curWord = curWord[NEXT];
      }
      return prevBestWord;
    }
    
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {    
      var Array objAddr, cur;
      var int objNext, objSz;
      let cur = freeList;
      let objAddr = o-2;
      
      while (~(cur[NEXT] = 0)) {
        let cur = cur[NEXT];
      }
      
      // Attach free block at the end of freeList
      let cur[NEXT] = objAddr;
      let objAddr[NEXT] = 0;
      return;
    }    
    
    //-------------------------------------
    // Helper functions
    //-------------------------------------
    /** Re-arrange freeList memory to create bigger free space
     *   TODO: should probably receive sorted elements. */
    function void deFrag(Array elem) {
      var Array cur;
      var int addr;
      let addr = elem + elem[LENGTH] + 2;   // elem attach point
      let cur = freeList;
      let cur[NEXT] = freeList[NEXT];       // next
      let cur[LENGTH] = freeList[LENGTH];   // size
      
      while (~(cur[NEXT] = 0)) {            // iterate through the list
        if (cur[NEXT] = addr + 1) {
          let elem[LENGTH] = elem[LENGTH] + cur[LENGTH] + 2;
          let addr = addr + cur[LENGTH] + 2;
        }
        let cur = cur[LENGTH];              // next element
      }
      
      let cur[NEXT] = elem;                 // attach elem at the end of freeList
      return; 
    }
}
