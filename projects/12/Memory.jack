// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
  
    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
      let ram = 0;            // Ram Base Address
      let heap = 2048;        // Heap Base Address
      
      let freeList = heap;        // head
      let freeList[0] = 0;        // next
      let freeList[1] = 14335;     // size
      
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array prev, cur, next;
      var int segSz, blockSz, addr;
      let prev = 0;
      let cur = freeList;
      let next = freeList[0];
      let segSz = freeList[1];
      let blockSz = size+2;
      
      while (~(cur = 0)) {
        if (~(segSz < blockSz)) {
          let addr = cur+2;                   // prepare current base address for returning
          
          /* check if the fitting element is the head of the list */
          if (cur = freeList) {               // first element fits
            let freeList = freeList + blockSz;  // new head
            if (segSz > blockSz) {
              let freeList[1] = segSz - blockSz;  //TODO what if first element fits???
            }
          }
          else {
            if (segSz > blockSz) {              // element is bigger
              let cur[0] = next;
              let cur[1] = segSz - blockSz;
            }
            else {                              // element fits perfect
              let prev[0] = next;
            }     
          }
          let cur = 0;                      // first-fit approach
        }
        else {                              // proceed with next element in the list
          let prev = cur;
          let cur = next;
          let next = cur[0];
          let segSz = cur[1];
        }
      }
      return addr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {    
      var Array objAddr, cur;
      var int objNext, objSz;
      let cur = freeList;
      let objAddr = o-2;
      
      while (~(cur[0] = 0)) {
        let cur = cur[0];
      }
      
      // Attach free block at the end of freeList
      let cur[0] = objAddr;
      let objAddr[0] = 0;
      return;
    }    
    
    //-------------------------------------
    // Helper functions
    //-------------------------------------
    function void deFragment() {
      return;
    }
}
