// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
  
    static Array twoToThe;    

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return x * -1;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int i, sum;
      var int shiftedX;
      
      let shiftedX = x;
      let i = 0;
      
      while (i < 16) {           // w, the number of bits required to represent N
        if (Math.bit(y, i)) {        // i'th bit of y
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX * 2;
        let i = i + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q;
      if (y > x) {
        return 0;
      }
      let q = Math.divide (x, 2*y);
      if ((x - 2*q*y) < y) {
        return 2*q;
      }
      else {
        return 2*q - 1;
      }    
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      // var int i, y;
      // let y = 0; 
      // let i = n/2 -1;
      
      // while (i > 0) {
       // if (y  
      // }
      return -1;
    }
    
    function int exp(int b, int e) {
      var int i, sum;
      let i = 0;
      let sum = 1;
      
      while (i < (e+1)) {
        let sum = sum * b;
      }
      return sum;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }

    //----------------------------------------
    // Helper functions
    //----------------------------------------
    
    // returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
      do Math.convertIntToBin(x, 15);
      if (twoToThe[i] = 1) {
        return true;
      }
      return false;
    }
    
    // convert int to binary, 16 bit
    function void convertIntToBin(int x, int ith) {      
      var int twoExpIth;
      let twoExpIth = Math.exp(2, ith);
      if (~(twoExpIth > x)) {
         let twoToThe[ith] = 1;
         let x = x - twoExpIth;
      }
      else {
        let twoToThe[ith] = 0;
      }
      if (~(ith = 0)) {
        do Math.convertIntToBin(x, ith-1);
      }
    }
}




