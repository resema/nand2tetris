// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
  
    static int twoToThe;    

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384+16384;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        let x = -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int i, sum;
      var int shiftedX;
      
      let sum = 0;
      let shiftedX = x;
      let i = 0;
      
      while (i < 16) {           // w, the number of bits required to represent N
        if (Math.bit(y, i)) {        // i'th bit of y
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      } 
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int negX, negY;
      var int q, result;
      let negX = 1;
      let negY = 1;
      
      if (x < 0) {
        let negX = -1;
      }
      if (y < 0) {
        let negY = -1;
      }
      let x = Math.abs(x);
      let y = Math.abs(y);
      
      let result = Math.doDivide(x, y);
      // if (y > x) {
        // return 0;
      // }
      // let q = Math.divide(x, (y+y));
      // if ((x - (2*q*y)) < y) {
        // let result = (q+q);
      // }
      // else {
        // let result = ((q+q) + 1);
      // }    
      return (result * negX * negY);
    }
    
    function int doDivide(int x, int y) {
      var int result, q;
      if ((y > x) | (y < 0)) {
        return 0;
      }
      let q = Math.doDivide(x, (y+y));
      if ((x - (2*q*y)) < y) {
        let result = (q+q);
      }
      else {
        let result = ((q+q) + 1);
      }   
      return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int j, y, approx, approxSqrd;
      let y = 0; 
      let j = 16/2-1;
      
      while (~(j < 0)) {
       let approx = (y + twoToThe[j]);
       let approxSqrd = approx * approx;
       if (~(approxSqrd > x) & (approxSqrd > 0)) {
         let y = approx;
       }
       let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }

    function int mod(int num, int den) {
      var int rest, negNum, negDen;
      let rest = 0;
      let negNum = 1;
      let negDen = 1;
      
      if (num < 0) {
        let negNum = -1;
        let num = Math.abs(num);
      }
      if (den < 0) {
        let negDen = -1;
        let den = Math.abs(den);
      }
      
      while (num > 0) {
        if (num < den) {
          let rest = num;
        }
        let num = num - den;
      }
      return rest * negNum * negDen;
    }
    
    //----------------------------------------
    // Helper functions
    //----------------------------------------
    
    // returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
      return ~((x & twoToThe[i]) = 0);
    }
    
    function int getTwoToThe(int i) {
      return twoToThe[i];
    }
}




